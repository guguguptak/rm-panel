// *** AUTOGENERATED // placing any import before this line will break autogeneration
import {
    vaxView,
    vaxForm,
    vaxBox,
    vaxCombobox,
    vaxFileInput,
    vaxButton,
} from "@/components";
// *** AUTOGENERATED end

import store from "@/store";
import { mapGetters } from "vuex";

import {
  API_GET_URL,
} from "@/utils/api.js";

import {
  userRolesStr,
  everyoneStr,
  noFilesSelectedStr,
} from "@/utils/i18n-data.js";

import {
  accessLevelToRole,
  roleToAccessLevel,
} from "@/utils/userRoles.js";

import {
  jsonViewDataMixin,
  jsonDataMixin,
  submitPutMixin,
  submitDeleteMixin,
} from "@/utils/mixins.js";

const DATA_FILE_LIST = "fileList";

const listFilter = { "names" : "", "ids" : -1 };
const listBase = { "names" : everyoneStr, "ids" : -1 };

export default {
  name: "vaxFiles",
  components: {
    vaxView,
    vaxForm,
    vaxBox,
    vaxCombobox,
    vaxFileInput,
    vaxButton,
  },
  data () {
    return {
      afterPut: () => this.getJsonData( DATA_FILE_LIST ),
      afterDelete: () => this.getJsonData( DATA_FILE_LIST ),
      deleteCaption: "\uF014\u00A0\u00A0" + "UsuÅ„",
    }
  },
  
  computed: {
    ...mapGetters( {
      ctx: "currentContext",
      ctxs: "possibleContexts",
    } ),
  },
  
  methods: {
    submitPutEx ( event ) {
      if ( event.target.elements["file"].files.length > 0 ) {
        this.submitPut( event );
      } else {
        alert( noFilesSelectedStr );
      }
      this.reset( event );
    },
    getDownloadLink ( filename ) {
      return API_GET_URL + '?mode=file&filename=' + encodeURIComponent( filename );
    },
    
    getLowerUserRoles () {
      const al = store.getters.accessLevel;
      const lur = userRolesStr.slice( 0, al ).reverse();
      return ( al >= 5 ) ? [ everyoneStr, ...lur ] : lur; // 'everyone' only for ROLE_CAMPAIGN_COORD & ROLE_ADMIN
    },
    getLowerUserRolesIds () {
      const al = store.getters.accessLevel;
      const luri = accessLevelToRole.slice( 0, al ).reverse();
      return ( al >= 5 ) ? [ -1, ...luri ] : luri; // ditto
    },
    fctxs ( name, type ) { // ... and ditto here
      const al = store.getters.accessLevel;
      var list = ( this.ctxs && this.ctxs[type] && this.ctxs[type][name] ) ? this.ctxs[type][name] : [];
      return ( al >= 5 ) ? [ listBase[type], ...list.filter( (x) => x !== listFilter[type] ) ] : list;
    },
    aclString ( meta ) {
      if ( !meta ) {
        return "";
      }
      var acl = meta.accessControl;
      if ( !acl ) {
        return "";
      }
      
      var ss = [];
      if ( acl.requiredRole ) {
        var role = userRolesStr[roleToAccessLevel[acl.requiredRole]];
        if ( role !== undefined ) {
          ss.push( role );
        }
      }
      for( var x in acl.context ) {
        ss.push( acl.context[x].name );
      }
      
      return ss.length === 0 ? "" : "[" + ss.join(", ") + "]";
    },

  },
  mixins: [
    jsonViewDataMixin,
    jsonDataMixin( DATA_FILE_LIST ),
    submitPutMixin,
    submitDeleteMixin,
  ]
}
