export default {
  props: {
    name: String,
    selectClass: String,
    horizontal: Boolean,

    captions: Array,
    values: Array,
    valuesFromCaptions: Boolean,    

    selectedValue: {
      type: [ String, Number ],
    },
    autoDisable: {
      type: Boolean,
      default: true
    },
    disabled: Boolean,
  },
  
  methods: {
    validateValues ( values ) {
      if ( this.valuesFromCaptions && values ) {
          throw "can't have values both autogenerated from names and from explicit list";
      }    
    }
  },
  
  data: () => ( {
  } ),
  
  watch: {
    values ( newVal, oldVal ) {
      this.validateValues( newVal );
    }
  },
  
  computed: {
    actualValues () {
      return ( this.valuesFromCaptions )
        ? this.captions
        : this.values ?? [...Array( this.captions.length ).keys()];
    },
    autoDisabled () {
      return this.autoDisable && this.actualValues.length < 2;
    },
    disabledValue () {
      return this.disabled ? this.selectedValue : this.actualValues[0];
    },
    disabledCaption () {
      if ( this.disabled ) {
        const av = this.actualValues, sv = this.selectedValue;
        var idx = av.indexOf( sv );
        if ( idx === -1 ) {
          idx = av.indexOf( "" + sv );
        }
        return this.captions[idx];
      }
      return ( this.captions !== undefined ) ? this.captions[0] : '';
    },
  },
  
  created () {
    this.validateValues( this.values );
  },
}
